#!/usr/bin/env bash

set -o errexit -o nounset -o pipefail -o errtrace
(shopt -p inherit_errexit &>/dev/null) && shopt -s inherit_errexit

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
readonly SCRIPT_DIR

cmd=${1:-help}
case "$cmd" in
b)
    cmd=build
    ;;
s)
    cmd=serve
    ;;
d)
    cmd=deploy
    ;;
- | --help)
    cmd=help
    ;;
esac
[[ $# -gt 0 ]] && shift 1

help() {
    cat <<EOF
Usage: quartz-deploy [CMD]
CMD:
  build, b  [<dir>=\$PWD]        Build markdown files to htmls. <dir>=The filepath of content directory.
  build image                   Build the image of guartz-deploy.
  deploy, d                     Deploy built folder to cloudflare page. If wrangler.toml existed on your project root.
  deploy, d [<dir>=\$PWD]        Deploy built folder to cloudflare page. <dir>=The filepath of content directory.
  serve, s  [<dir>=\$PWD]        Build and watch to rebuild. <dir>=The filepath of content directory.
  help                           Show help
EOF
}

set_envs() {
    export CONTENT_DIR=$(realpath "${1:-$PWD}")
    export QUART_VERSION=${2:-4.5.2}

    export QUART_DEPLOY_DIR=$SCRIPT_DIR

    if [[ -f $CONTENT_DIR/.quartz/config.ts ]]; then
        export QUARTZ_CONFIG=$CONTENT_DIR/.quartz/config.ts
    else
        export QUARTZ_CONFIG=$SCRIPT_DIR/quartz/config.ts
    fi

    if [[ -f $CONTENT_DIR/.quartz/my.ts ]]; then
        export QUARTZ_MY=$CONTENT_DIR/.quartz/my.ts
    else
        export QUARTZ_MY=$SCRIPT_DIR/quartz/my.ts
    fi

    if [[ -f $CONTENT_DIR/.quartz/layout.ts ]]; then
        export QUARTZ_LAYOUT=$CONTENT_DIR/.quartz/layout.ts
    else
        export QUARTZ_LAYOUT=$SCRIPT_DIR/quartz/layout.ts
    fi

}

print_envs() {
    cat <<EOF
[QUART_DEPLOY ENVS]
QUART_VERSION=$QUART_VERSION
CONTENT_DIR=$CONTENT_DIR
QUART_DEPLOY_DIR=$QUART_DEPLOY_DIR
QUARTZ_MY=$QUARTZ_MY
QUARTZ_CONFIG=$QUARTZ_CONFIG
QUARTZ_LAYOUT=$QUARTZ_LAYOUT

EOF
}

build() {
    set_envs "${@}"
    print_envs
    docker compose -f "$SCRIPT_DIR/compose.yaml" up build
}

debug() {
    set_envs "${@}"
    print_envs
    docker compose -f "$SCRIPT_DIR/compose.yaml" run --rm -it debug bash
}

serve() {
    set_envs "${@}"
    print_envs
    docker compose -f "$SCRIPT_DIR/compose.yaml" up serve
}

clean() {
    set_envs "${@}"
    print_envs
    docker compose -f "$SCRIPT_DIR/compose.yaml" down -v
}

deploy() {
    if [[ -e $PWD/wrangler.toml ]]; then
        wrangler pages deploy
    else
        local dir=$1
        dir=$(realpath "$dir")
        wrangler pages deploy "$dir"
    fi
}

build-image() {
    set_envs "$PWD"
    export QUART_VERSION=$1
    docker compose -f "$SCRIPT_DIR/compose.yaml" build build
}

build-multi-images() {
    set_envs "$PWD"
    export QUART_VERSION=$1
    docker buildx bake -f "$SCRIPT_DIR/compose.yaml" --push build
}

"${cmd}" "$@"
